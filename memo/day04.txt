position
    HTML요소를 배치하는 속성

    속성값의 종류
    1. static
        position 속성의 기본값(설정하지 않으면 자동으로 static)   
        일반적인 흐름으로 배치된다.

    2. relative
        static과 동일하게 배치된다.
        차이점은 현재 자신의 위치를 기준으로 배치를 변경할 수 있다.
        top, right, bottom, left,  속성을 사용하여 위치를 변경한다.

    3. absolute
        일반적인 흐름과 무관하게 배치할 수 있다.
        position : static이 아닌 조상요소를 기준으로 배치한다.
        만약 조상요소 중 static이 아닌 요소가 없다면  body를 기준으로 배치한다.

    4. fixed
        브라우저 화면상으로 보이는 영역(view-port)에 고정되도록 배치한다.
        즉, 스크롤 하여도 고정되어 따라온다.

    5. sticky
        처음에는 일반적인 흐름에 배치되고, 스크롤이 특정 위치에 도달하면 fixed 처럼 화면에 고정된다.
        주의사항 : 부모 요소에 height가 지정되어 있어야만 작동한다.

position과 관련된 속성
    - z-index
    요소가 배치될 때 겹치게ㅐ 된다면 어떤 요소가 위로 올러갈지 순서를 정하는 속성
    
    기본값은 오토이며 지정하는 값은 1, 10, 100, -1, -100 등의 숫자를 사용한다
    숫자가 높을수록 요소가 앞으로 나오게 된다.

    주의 : 포지션이 스타틱이 아닌 요소에만 적용됨


---------------------------------------------------------------------------------------------------------------------------

고급 선택자
    1. 연결선택자
        - 하위선택자
            상위요소 하위요소 {}
            상위요소에 포함된 모든 하위요소를 선택한다.
            자식을 포함한 모든 자손이 선택된다.
        - 자식선택자
            부모요소 > 자식요소 {}
            부모요소 바로 아래에 속한 자식요소를 선택한다.
        - 인접 형태 선택자
            요소1 + 요소2 {}
        - 형제 선택자
            요소1 ~ 요소2 {}
    
    2. 속성 선택자
        - 선택자[속성]
        - 선택자[속성 = 속성값]
 
가상 선택자
    1. 가상 클래스
        선택자 : 가상클래스 { }
        실제 존재하는 요소의 특정 상태에 따라 css를 주고싶을 때 사용한다

        link : herf 속성을 가진 태그 중 아직 방문하지 않은 상태
        visited : 이미 방문한 상태
        hover : 사용자가 마우스를 올린 상태
        focus : 입력 가능한 칸을 선택한 상태
        nth-child : 형제 중 순서로 선택
        not(선택자) : 해당 선택자를 제외하고 선택함 
    
    2. 가상 요소
    선택자 :: 가상요소{}
    요소의 특정 부분에 스타일을 지정하거나 새로운 요소를 삽입하기 위해 사용한다.

     - first-letter : 첫 글자만 선택
     - filst-line : 첫 줄만 선택 
     - before : 선택한 요소의 컨탠츠 압ㅍ에 다른 요소 삽입
     - after  선택한요소의 컨텐츠 뒤에 다른 요소 삽입


-------------------------------------------------------------------------------------------------------------------------------------------

tranceform
    요소의 크기 조절, 이동, 회전 효과를 나타낼 떄 사용
    tranceform 함수를 사용한다
    주의사항 : 요소의 display 속성이 블록 또는 인라인 록이어야 한다.

    tranceform함수 
    - translate(x, y), translateX(x), translateY(y)
        넘겨준 값 만틈 x, y 좌표 이동

    - scale(x, y), scaleX(x), scaleY(y)
        넘겨준 값 만큼 확대, 축소

    - rotate( 각도deg)
        넘겨준 값 만큼 회전

transition
    tranceform은 단순한 변형을 수행한다
    transition은 변형에 시간을 설정하여 마치 하나의 애니메이션처럼 표현할 수 있다.
    tranceform과 달리 완전히 다른 스타일로 변경시킬 수 있다.

transition의 속성
    transition-property : all | none | 특정 속성명
    트렌지션을 적용시킬 속성을 선택한다

    transition-duration : 시간s
    트렌지션의 진ㅇ행 시간을ㅇ 설정한다

    transition-timing-function : 속성값
    석성값의 종류
    ease : 천천히 점점빨리 천천히(기보ㅓㄴ값)
    linear : 시작부터 끝까지 같ㄹ은속도로
    ease-in : 느리게 시작
    ease-out : 느리게 끝
    ease-on-out : 

       transition-delay : 시간s
        트랜지션을 바로 시작하지 않고 지연시간을 설정

        transition : property | duration | timing-function | delay
        위의 모든 속성을 간편하게 설정할 수 있다.

-------------------------------------------------------------------------------------------------------------

animation
    css로 애니메이션 효과를 만들기 위한 속성
    transition보다 더 쉽고 상세하게 애니메이션 효과를 설정할 있다.
    animation 속성은 특정 지점에서 스타일을 바꿀 수 있는데  그 지점을  keyfram이라고 한다
    keyfram을 미리 만들어두고 적용시키고 싶은 요소에 다양한 솓성으로 애니메이션을 적용한다

animation의 속성
    - @keyframs : 특정 지점을 설정한다
                만들고 싶은 애니메이션 이름을 설정, 
                from(시작), to (끝), percent(진행도)를 선택자로 사용한다

                @keyframs 키프레임이름 {
                    선택자{ 스타일; }
                }

적용시키고 싶은 요소에 사용하는 속성

    - animation-name : 키프레임이름
    적용시키고 싶은 요소에 애니메이션 효과를 지정한다.
    미리 만들어둔 키프레임 이름을 사용하면 된다.
    
    - animation-duration
    애니메이션 실행 시간을 설정

    - animation-iteration-count : 반복 횟수 | infinite
    애니메이션 반복 횟수 설정
    
    - animation-delay 
    애니메이션 시작 시간 설정

    - animation 
    애니메이션 속성을 간편하게 설정한다.
    
    - 기타등등….

    ----------------------------------------------------------------------------------------------------------------------------------------------------------------

    form 태그
    <form action = "데이터를 전송할 주소" method="get | post">
    푬 요소
    </form>

    1. from 태그는 사용자에게 입력받은 데이터를 서버로 전송하기 위해 작성한다
    2. 입력받은 데이터를 폼 데이터, 필드라고 부른다
    3. form 태그는 내부 요소로 input, textarea, select, option 태그 등을 가질 수 있다
    4. 주요 속성은 다음과 같다.
    - action : form태그 내부 요소에 작성된 데이터를 처리할 서버쪽 주소를 작성한다
    - method : 서버에 데이터를 넘겨주는 방법으로  작성한다'


 input 태그
    <input type = "사용 할 타입">
    1. 실질적으,로 사용자에게 입력받는 택,
    2. form 태그, 내부에 작성해야 하며 서버쪽에 데이터를 넘겨줄 수 ㅣㅆ다
    3. type 속성의 값에 따라 입력받는  방식이 바뀐다.

    - text : 텍스트 형태로 사용자에게 입력을 받는다. (아이디, 주소 등등)
        - password : 패스워드를 입력받는다.(화면에 입력한 값이 보이지 않음)
        - date : 년, 월, 일을 선택하여 입력받는다.
        - submit : 전송 버튼을 만든다.
        - reset : 리셋 버튼을 만든다.
        - file : 첨부파일 버튼을 만든다.
        - hidden : 화면에서는 보이지 않는 칸을 만든다.
            주로 name 과 value 속성을 같이 사용한다.
        등등…
        - radio : 라디오 버튼을 만든다.
            라디오 버튼은 여러 선택지 중 하나만 선택한다.
        - checkbox : 체크 박스를 만든다.
            체크 박스는 여러 선택지 중 여러 개를 선택한다.
            라디오, 체크 박스는 name, value 와 checked 속성을 사용한다.

label 태그
    사용자가 입력하는 input태그에 대한 설명이다
    웹 접근성이 좋기 때문에 적극적인 사용 권장

    1. label 태그를 사용하고 하위 태그로 input 태그를 사용하면 된다.
    <label>
       이름 : 
       <input type="">
    </label>
    
    2. for 와 id 속성을 사용하여 연결할 수 있다. // 활용도는 2번째 방식이 저 높다. 이곳저곳에서 사용됨
    <label for="name">이름 : </label>
    <input type="date" id="name" />
    

